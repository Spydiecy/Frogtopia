import React, { useState } from 'react';

const LandManagement = ({ lands, gameContract, account, web3, onLandUpdate }) => {
  const [mintingLand, setMintingLand] = useState(false);
  const [developingLand, setDevelopingLand] = useState(false);
  const [listingLand, setListingLand] = useState(false);
  const [selectedLand, setSelectedLand] = useState(null);
  const [listingPrice, setListingPrice] = useState('');

  const mintLand = async () => {
    setMintingLand(true);
    try {
      await gameContract.methods.mintLand().send({ from: account });
      onLandUpdate();
    } catch (error) {
      console.error("Error minting land:", error);
    }
    setMintingLand(false);
  };

  const developLand = async (tokenId) => {
    setDevelopingLand(true);
    try {
      await gameContract.methods.developLand(tokenId).send({ from: account });
      onLandUpdate();
    } catch (error) {
      console.error("Error developing land:", error);
    }
    setDevelopingLand(false);
  };

  const listLandForSale = async (tokenId, price) => {
    setListingLand(true);
    try {
      const priceWei = web3.utils.toWei(price, 'ether');
      await gameContract.methods.listLandForSale(tokenId, priceWei).send({ from: account });
      onLandUpdate();
    } catch (error) {
      console.error("Error listing land for sale:", error);
    }
    setListingLand(false);
  };

  return (
    <div className="land-management">
      <h2 className="text-2xl font-bold mb-4">Land Management</h2>
      <button 
        onClick={mintLand} 
        disabled={mintingLand}
        className="bg-yellow-500 text-green-800 px-4 py-2 rounded mb-4 hover:bg-yellow-600 transition-colors duration-300"
      >
        {mintingLand ? 'Minting...' : 'Mint New Land'}
      </button>
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
        {lands.map((land) => (
          <div key={land.tokenId} className="bg-green-700 p-4 rounded shadow-lg">
            <h3 className="text-xl font-semibold mb-2">Land #{land.tokenId}</h3>
            <p>Type: {land.landType}</p>
            <p>Features: {land.features}</p>
            <p>Developed: {land.isDeveloped ? 'Yes' : 'No'}</p>
            {!land.isDeveloped && (
              <button 
                onClick={() => developLand(land.tokenId)}
                disabled={developingLand}
                className="bg-blue-500 text-white px-3 py-1 rounded mt-2 hover:bg-blue-600 transition-colors duration-300"
              >
                {developingLand ? 'Developing...' : 'Develop Land'}
              </button>
            )}
            <button 
              onClick={() => setSelectedLand(land.tokenId)}
              className="bg-purple-500 text-white px-3 py-1 rounded mt-2 ml-2 hover:bg-purple-600 transition-colors duration-300"
            >
              List for Sale
            </button>
          </div>
        ))}
      </div>
      {selectedLand && (
        <div className="mt-4 bg-green-700 p-4 rounded shadow-lg">
          <h3 className="text-xl font-semibold mb-2">List Land #{selectedLand} for Sale</h3>
          <input 
            type="number" 
            value={listingPrice}
            onChange={(e) => setListingPrice(e.target.value)}
            placeholder="Price in CROAK"
            className="bg-green-600 text-white px-3 py-1 rounded mr-2 focus:outline-none focus:ring-2 focus:ring-yellow-500"
          />
          <button 
            onClick={() => listLandForSale(selectedLand, listingPrice)}
            disabled={listingLand}
            className="bg-yellow-500 text-green-800 px-3 py-1 rounded hover:bg-yellow-600 transition-colors duration-300"
          >
            {listingLand ? 'Listing...' : 'Confirm Listing'}
          </button>
        </div>
      )}
    </div>
  );
};

export default LandManagement;